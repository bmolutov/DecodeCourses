//////////////////////////////////////////////////////////////////////

Java Packages & API

A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:

Built-in Packages (packages from the Java API)
User-defined Packages (create your own packages)

//////////////////////////////////////////////////////////////////////

Built-in Packages
The Java API is a library of prewritten classes, that are free to use, included in the Java Development Environment.

The library contains components for managing input, database programming, and much much more. The complete list can be found at Oracles website: https://docs.oracle.com/javase/8/docs/api/.

The library is divided into packages and classes. Meaning you can either import a single class (along with its methods and attributes), or a whole package that contain all the classes that belong to the specified package.

To use a class or a package from the library, you need to use the import keyword:


Syntax
import package.name.Class;   // Import a single class
import package.name.*;   // Import the whole package

///////////////////////////////////////////////////////////////////////

Import a Class
If you find a class you want to use, for example, the Scanner class, which is used to get user input, write the following code:

Example
import java.util.Scanner;
import java.util.*;

In the example above, java.util is a package, while Scanner is a class of the java.util package.

To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read a complete line:

# see code example "E1.java"

///////////////////////////////////////////////////////////////////////

Import a Package
There are many packages to choose from. In the previous example, we used the Scanner class from the java.util package. This package also contains date and time facilities, random-number generator and other utility classes.

To import a whole package, end the sentence with an asterisk sign (*). The following example will import ALL the classes in the java.util package:

Example
import java.util.*;

////////////////////////////////////////////////////////////////////////

User-defined Packages
To create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:

Example
└── root
  └── mypack
    └── MyPackageClass.java

To create a package, use the package keyword:

# see code example "mypack"

////////////////////////////////////////////////////////////////////////

Save the file as MyPackage.java, and compile it:
C:\Users\Your Name>javac MyPackage.java

Then compile the package:
C:\Users\Your Name>javac -d . MyPackage.java

///////////////////////////////////////////////////////////////////////

This forces the compiler to create the "mypack" package.

The -d keyword specifies the destination for where to save the class file. You can use any directory name, like c:/user (windows), or, if you want to keep the package within the same directory, you can use the dot sign ".", like in the example above.

Note: The package name should be written in lower case to avoid conflict with class names.

//////////////////////////////////////////////////////////////////////

When we compiled the package in the example above, a new folder was created, called "mypack".

To run the MyPackage.java file, write the following:
C:\Users\Your Name>java mypack.MyPackage

The output will be:
This is my package

///////////////////////////////////////////////////////////////////////

Java Inheritance (Subclass and Superclass)
In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:

subclass (child) - the class that inherits from another class
superclass (parent) - the class being inherited from
To inherit from a class, use the extends keyword.

In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):

# see code example "Car.java"

//////////////////////////////////////////////////////////////////////

Did you notice the protected modifier in Vehicle?

We set the brand attribute in Vehicle to a protected access modifier. If it was set to private, the Car class would not be able to access it.

Why And When To Use "Inheritance"?
- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.

//////////////////////////////////////////////////////////////////////

The final Keyword
If you don't want other classes to inherit from a class, use the final keyword:

# see code example "Tiger.java"

/////////////////////////////////////////////////////////////////////




